class Car:
    """A simple attempt to represent a car."""
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    def read_odometer(self):
        """print a statement showing the cars mileage"""
        print(f" This car has {self.odometer_reading} miles on it")

    def update_odometer(self,mileage):
        """set the odometer reading to the given value, Reject the change if it attempts roll the odometer back"""
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            print("You can't roll the odometer back!")
    def increment_odometer_reading(self,miles):
        """add the given amount to the odometer reading"""
        self.odometer_reading += miles


my_new_car = Car('audi', 'a4', 2019)
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer()

my_new_car.odometer_reading =23
my_new_car.read_odometer()

my_new_car = Car('audi', 'a4', 2019)
print(my_new_car)

my_new_car.update_odometer(100)
my_new_car.read_odometer()

my_new_car.update_odometer(50)

my_used_car= Car('subaru', 'impreza',2022)
print(my_used_car.get_descriptive_name())

my_used_car.update_odometer(23_500)
my_used_car.read_odometer()

my_used_car.increment_odometer_reading(100)
my_used_car.read_odometer()
